{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItme.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputvalue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","TextField","id","label","variant","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","title","images","downsized_medium","GifGridItme","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OAEI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAQ,IAC7BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAsBO,OACxCN,EAAe,MAOhB,SAEI,cAACO,EAAA,EAAD,CACIC,GAAG,iBACHC,MAAM,0BACNC,QAAQ,WACRC,KAAK,OACLC,MAAOb,EACPc,SAzBc,SAACX,GAEvBF,EAAcE,EAAEY,OAAOF,a,iCCXlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,0DAE4CC,UAAUH,GAFtD,sDAIKI,MAAOF,GAJZ,cAIbG,EAJa,gBAMEA,EAAUC,OANZ,uBAMZC,EANY,EAMZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHlB,GAAGkB,EAAIlB,GACPmB,MAAOD,EAAIC,MACXT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QAZvB,kBAebM,GAfa,4CAAH,sDCEPM,EAAc,SAAC,GAAqB,EAApBtB,GAAqB,IAAjBmB,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IAGpC,OACI,sBAAKa,UAAU,0CAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAIrB,ECJwB,SAACA,GAEzB,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OAnBAC,qBAAW,WAEPvB,EAASC,GAERuB,MAAK,SAAAC,GAEFH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAMlB,CAACnB,IAKGoB,EDtBuBK,CAAazB,GAA/BY,EAAZ,EAAOL,KAAYY,EAAnB,EAAmBA,QAKnB,OACI,qCACI,oBAAIJ,UAAU,0CAAd,SAAyDf,IAExDmB,GAAW,mBAAGJ,UAAU,yCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAGYH,EAAOH,KAAK,SAAAC,GACR,OAAO,cAAC,EAAD,eAEHA,GADGA,EAAIlB,aEpB1BkC,EAAe,WAGxB,MAAoC5C,mBAAS,CAAE,gBAA/C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAQA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAcA,cAAkBA,IAChC,uBAGA,6BAEM8C,EAAWlB,KAAK,SAACT,GACf,OAAO,cAAC,EAAD,CAEPA,SAAYA,GADLA,Y,MCvB3B4B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.9673c981.chunk.js","sourcesContent":["import React from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputvalue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n      \n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if( inputvalue.trim().length> 2 ){\n         setCategories(cats => [ inputvalue , ...cats ])\n         setInputValue ('');\n        }\n\n        \n    }\n    return (\n       \n        <form onSubmit={handleSubmit}>\n            \n            <TextField \n                id=\"outlined-basic\" \n                label=\"Añade un nuevo anime\" \n                variant='outlined'\n                type=\"text\"\n                value={inputvalue}\n                onChange={ handleInputChange }\n            />\n        </form>\n        \n      \n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=mr7uie4eHh3vh4Rro0mCpXLuZ8u1aKzY`\n\n    const respuesta = await fetch( url );\n\n    const {data} = await respuesta.json();\n\n    const gifs = data.map(img => {\n        return {\n            id:img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n   return gifs\n}\n","import React from 'react'\n\nexport const GifGridItme = ({id, title, url}) => {\n\n    // console.log(id, title, url);\n    return (\n        <div className='card animate__animated animate__fadeIn '>\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React, { useEffect } from 'react'\nimport { useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItme } from './GifGridItme';\n\nexport const GifGrid = ({category}) => {\n\n    // const [images, setImages] = useState([]);\n\n    const {data:images,loading} = useFetchGifs(category);\n\n   \n\n\n    return (\n        <>\n            <h3 className='card animate__animated animate__fadeIn '>{category}</h3>\n\n            {loading && <p className=\"card animate__animated animate__flash \">Loading</p>}\n         \n            <div className='card-grid'>\n            \n                    {\n                        images.map( img => {\n                            return <GifGridItme \n                            key = {img.id}\n                            {...img } ></GifGridItme>\n                        })\n                    }\n                \n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n\n\nexport const useFetchGifs = (category )=> {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( ()=> { //se dispara cuando cambia la categoria\n\n        getGifs( category )\n\n        .then(imgs =>{\n\n            setstate({\n                data: imgs,\n                loading: false\n            });\n         \n        } )\n\n\n    }, [category])\n\n\n   \n    \n    return state; //data: [] y el loading: true\n    \n\n}","import React from 'react'\n// import Button from '@material-ui/core/Button'\nimport { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n\n    const [categories, setCategories] = useState([ 'Dragon Ball'])\n\n    // const handleAdd = () => {\n    //     // setcategories( [...categories, 'alma de oro'] ); //primera froma de añadir\n    //     setcategories(cats => [...cats, 'alma de oro']) //el cats es el valor de estado anterior y seeguido del nuevo\n\n    // }\n    \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory  setCategories = { setCategories }></AddCategory>\n            <hr />\n\n       \n            <ol>\n                { \n                  categories.map( (category) => {\n                    return <GifGrid \n                    key = {category}\n                    category = {category}></GifGrid>\n                  } )  \n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}